---
- name: Ensure trust user for slave host
  become: yes
  become_user: root
  user:
    name: "{{ ssh_trust.trust_user.name }}"
    comment: "{{ ssh_trust.trust_user.comment | default('') }}"
    createhome: yes
    state: "{{ ssh_trust.trust_user.state | default('present') }}"
    shell: "{{ ssh_trust.trust_user.shell | default('/bin/false') }}"
  when: ssh_trust.trust_user.create

- name: Find proper master host
  set_fact:
    # Basically at this stage all master hosts will already have ssh keys due
    # to the fact master tasks declared earlier than slave tasks and thus they
    # will be done earlier as slaves will wait for masters to be done
    master_hosts: "{% if hostvars[host].ssh_trust.master and hostvars[host].ssh_trust.group == ssh_trust.group %}{{ master_hosts | default([]) | union([host]) }}{% else %}{{ master_hosts | default([]) }}{% endif %}"
  # Magic `ansible_play_hosts_all` var allows us to name ssh_trust group
  # whatever we want to and don't use separate master and slave groups
  loop: "{{ ansible_play_hosts_all }}"
  loop_control:
    loop_var: host

- name: Fail in case there is no masters for given group
  fail:
    msg: "We found SSH trust group name '{{ ssh_trust.group }}' for slave host '{{ inventory_hostname }}'. But seems that there is no masters with such a group, so we gracefully stop the playbook. Check your vars and re-run, please."
  when: master_hosts == []

- name: Ensure master public key for trust user
  become: yes
  become_user: root
  authorized_key:
    user: "{{ ssh_trust.trust_user.name }}"
    state: present
    key: "{{ hostvars[master_host].ssh_master_public_key.content | b64decode }}"
  loop: "{{ master_hosts }}"
  loop_control:
    loop_var: master_host
